/*
 * AirBlock - Framework for Multi-Platform Minecraft-Plugins.
 * Copyright (C) 2014 stux!
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package moe.encode.airblock.commands.arguments.list;

import moe.encode.airblock.utils.ReflectionUtils;
import moe.encode.airblock.commands.Executor;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.theories.Theories;
import org.junit.runner.RunWith;

import java.lang.reflect.Type;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;

@RunWith(Theories.class)
public class SliceIterableTest {

    public static class FAL extends ArgumentList {

        /**
         * Creates a new argument list.
         *
         * @param arguments The arguments that have been passed to the command.
         * @param executor  The executor of the command.
         */
        public FAL(String[] arguments, Executor executor) {
            super(arguments, executor);
        }

        @Override
        @SuppressWarnings("unchecked")
        public <E> E get(int index, Type cls) {
            if (String.class.equals(ReflectionUtils.toClass(cls)))
                return (E)this.values[this.getRealIndex(index)];
            return null;
        }
    }

    ArgumentList arguments;

    @Before
    public void prepareArguments() {
        this.arguments = new FAL(SliceIterableTest.range(1100, 1200), mock(Executor.class));
    }

    /**
     * These values are automatically generated by this python function:
     * <pre>
     *     def getdata(start=None,stop=None,step=None):
     *         sl = slice(start, stop, step)
     *         l = list(range(1100,1200))
     *         return sl.indices(len(l)) + (len(l[sl]),)
     *     def gen_datapoints():
     *         stasto = [None, 1, -1]
     *         stes = [None, -1, 2, -2]
     *
     *         jval = lambda n: "null" if n is None else n
     *         def t5v(sa, so, se):
     *             l = []
     *             for n in [-2, -1, 0, 1, 2]:
     *                 try:
     *                     l.append((range(1100, 1200)[sta:sto:ste][n]));
     *                 except:
     *                     l.append("null")
     *             return tuple(l)
     *
     *         for sta in stasto:
     *             for sto in stasto:
     *                 for ste in stes:
     *                     print("new Integer[] {" + ", ".join(("%4s"%w if i != 7 else "%12s"%w) if i != 3 else "%10s"%w for i, w in enumerate(str(v) for v in (jval(sta), jval(sto), jval(ste)) + getdata(sta,sto,ste) + t5v(sta, sto, ste))) + "},")
     *     gen_datapoints()
     * </pre>
     */
    public static Integer[][] VALUES = new Integer[][] {
            //            VALUES PASSED               EXPECTED RESULTS                          EXPECTED VALUES
            //            start stop  step         rSta  rSto  rSte  rLen            -2    -1     0     1     2
            new Integer[] {null, null, null,          0,  100,    1,  100,         1198, 1199, 1100, 1101, 1102},
            new Integer[] {null, null,   -1,         99,   -1,   -1,  100,         1101, 1100, 1199, 1198, 1197},
            new Integer[] {null, null,    2,          0,  100,    2,   50,         1196, 1198, 1100, 1102, 1104},
            new Integer[] {null, null,   -2,         99,   -1,   -2,   50,         1103, 1101, 1199, 1197, 1195},
            new Integer[] {null,    1, null,          0,    1,    1,    1,         null, 1100, 1100, null, null},
            new Integer[] {null,    1,   -1,         99,    1,   -1,   98,         1103, 1102, 1199, 1198, 1197},
            new Integer[] {null,    1,    2,          0,    1,    2,    1,         null, 1100, 1100, null, null},
            new Integer[] {null,    1,   -2,         99,    1,   -2,   49,         1105, 1103, 1199, 1197, 1195},
            new Integer[] {null,   -1, null,          0,   99,    1,   99,         1197, 1198, 1100, 1101, 1102},
            new Integer[] {null,   -1,   -1,         99,   99,   -1,    0,         null, null, null, null, null},
            new Integer[] {null,   -1,    2,          0,   99,    2,   50,         1196, 1198, 1100, 1102, 1104},
            new Integer[] {null,   -1,   -2,         99,   99,   -2,    0,         null, null, null, null, null},
            //             start stop  step         rSta  rSto  rSte  rLen           -2    -1     0     1     2
            //             VALUES PASSED               EXPECTED RESULTS                         EXPECTED VALUES
            //             start stop  step         rSta  rSto  rSte  rLen           -2    -1     0     1     2
            new Integer[] {   1, null, null,          1,  100,    1,   99,         1198, 1199, 1101, 1102, 1103},
            new Integer[] {   1, null,   -1,          1,   -1,   -1,    2,         1101, 1100, 1101, 1100, null},
            new Integer[] {   1, null,    2,          1,  100,    2,   50,         1197, 1199, 1101, 1103, 1105},
            new Integer[] {   1, null,   -2,          1,   -1,   -2,    1,         null, 1101, 1101, null, null},
            new Integer[] {   1,    1, null,          1,    1,    1,    0,         null, null, null, null, null},
            new Integer[] {   1,    1,   -1,          1,    1,   -1,    0,         null, null, null, null, null},
            new Integer[] {   1,    1,    2,          1,    1,    2,    0,         null, null, null, null, null},
            new Integer[] {   1,    1,   -2,          1,    1,   -2,    0,         null, null, null, null, null},
            new Integer[] {   1,   -1, null,          1,   99,    1,   98,         1197, 1198, 1101, 1102, 1103},
            new Integer[] {   1,   -1,   -1,          1,   99,   -1,    0,         null, null, null, null, null},
            new Integer[] {   1,   -1,    2,          1,   99,    2,   49,         1195, 1197, 1101, 1103, 1105},
            new Integer[] {   1,   -1,   -2,          1,   99,   -2,    0,         null, null, null, null, null},
            //             start stop  step         rSta  rSto  rSte  rLen           -2    -1     0     1     2
            //             VALUES PASSED               EXPECTED RESULTS                         EXPECTED VALUES
            //             start stop  step         rSta  rSto  rSte  rLen           -2    -1     0     1     2
            new Integer[] {  -1, null, null,         99,  100,    1,    1,         null, 1199, 1199, null, null},
            new Integer[] {  -1, null,   -1,         99,   -1,   -1,  100,         1101, 1100, 1199, 1198, 1197},
            new Integer[] {  -1, null,    2,         99,  100,    2,    1,         null, 1199, 1199, null, null},
            new Integer[] {  -1, null,   -2,         99,   -1,   -2,   50,         1103, 1101, 1199, 1197, 1195},
            new Integer[] {  -1,    1, null,         99,    1,    1,    0,         null, null, null, null, null},
            new Integer[] {  -1,    1,   -1,         99,    1,   -1,   98,         1103, 1102, 1199, 1198, 1197},
            new Integer[] {  -1,    1,    2,         99,    1,    2,    0,         null, null, null, null, null},
            new Integer[] {  -1,    1,   -2,         99,    1,   -2,   49,         1105, 1103, 1199, 1197, 1195},
            new Integer[] {  -1,   -1, null,         99,   99,    1,    0,         null, null, null, null, null},
            new Integer[] {  -1,   -1,   -1,         99,   99,   -1,    0,         null, null, null, null, null},
            new Integer[] {  -1,   -1,    2,         99,   99,    2,    0,         null, null, null, null, null},
            new Integer[] {  -1,   -1,   -2,         99,   99,   -2,    0,         null, null, null, null, null},
            //             start stop  step         rSta  rSto  rSte  rLen           -2    -1     0     1     2
            //             VALUES PASSED               EXPECTED RESULTS                         EXPECTED VALUES

    };

    @Test
    public void testSlicePreparation() {
        for (Integer[] testValues : VALUES) {
            int[] slicedata = SliceIterable.prepare(this.arguments.size(), testValues[0], testValues[1], testValues[2]);
            assertEquals((Object)slicedata[0], testValues[3]);
            assertEquals((Object)slicedata[1], testValues[4]);
            assertEquals((Object)slicedata[2], testValues[5]);
            assertEquals((Object)slicedata[3], testValues[6]);
        }
    }

    @Test
    public void testSliceResults() {
        for (Integer[] testValues : VALUES) {
            SliceIterable si = new SliceIterable(this.arguments, testValues[0], testValues[1], testValues[2]);
            assertEquals((Object)si.size(), testValues[6]);
            for (int i : new int[]{-2, -1, 0, 1, 2}) {
                Integer v = testValues[9+i];
                assertEquals(si.get(i, String.class, null), (v==null)?null:""+v);
            }
        }
    }

    public static String[] range(int start, int stop) {
        String[] values = new String[stop - start];
        for (int i=0, v = start; v<stop; v++, i++) {
            values[i] = "" + v;
        }
        return values;
    }

}